openapi: 3.0.3
info:
  title: Rocketpass API
  version: v1
  description: |
    JWT tabanlı kimlik doğrulama, davet, rol ve yetki altyapısı.
servers:
  - url: http://localhost:3000
    description: Development
tags:
  - name: Auth
  - name: Users
  - name: Profiles
  - name: Tasks
  - name: Uploads
paths:
  /api/v1/auth:
    post:
      tags: [Auth]
      summary: Kayıt ol (sign up)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  required: [email, password, password_confirmation]
                  properties:
                    email: { type: string, format: email }
                    password: { type: string }
                    password_confirmation: { type: string }
                    account_name: { type: string }
      responses:
        '200':
          description: Başarılı kayıt + tokenlar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '422':
          description: Doğrulama hatası
  /api/v1/auth/sign_in:
    post:
      tags: [Auth]
      summary: Giriş yap (sign in)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  required: [email, password]
                  properties:
                    email: { type: string, format: email }
                    password: { type: string }
      responses:
        '200':
          description: Başarılı giriş + tokenlar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Yetkisiz
  /api/v1/auth/sign_out:
    delete:
      tags: [Auth]
      summary: Çıkış yap (sign out)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token: { type: string }
      responses:
        '204':
          description: İçerik yok (başarılı)
  /api/v1/auth/refresh:
    post:
      tags: [Auth]
      summary: Token yenile (refresh)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token: { type: string }
      responses:
        '200':
          description: Yeni access ve refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          description: Geçersiz refresh token
  /api/v1/me:
    get:
      tags: [Users]
      summary: Oturum bilgisi
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Kullanıcı bilgileri
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer }
                  email: { type: string, format: email }
                  account_id: { type: integer }
                  roles:
                    type: array
                    items: { type: string }
                  permissions:
                    type: array
                    items: { type: string }
        '401':
          description: Yetkisiz
  /api/v1/profiles:
    get:
      tags: [Profiles]
      summary: Profil listesi
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: items
          schema: { type: integer }
        - in: query
          name: q
          schema: { type: object }
          description: Ransack sorgu parametreleri
        - in: query
          name: search
          schema: { type: string }
          description: Full-text arama
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Profile' }
                  meta:
                    type: object
                    properties:
                      count: { type: integer }
                      page: { type: integer }
                      items: { type: integer }
                      pages: { type: integer }
                      prev: { type: integer, nullable: true }
                      next: { type: integer, nullable: true }
    post:
      tags: [Profiles]
      summary: Profil oluştur
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  $ref: '#/components/schemas/ProfileInput'
      responses:
        '201':
          description: Oluşturuldu
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
  /api/v1/profiles/{id}:
    get:
      tags: [Profiles]
      summary: Profil detay
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
    put:
      tags: [Profiles]
      summary: Profil güncelle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  $ref: '#/components/schemas/ProfileInput'
      responses:
        '200':
          description: Güncellendi
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
    delete:
      tags: [Profiles]
      summary: Profil sil
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Silindi
  /api/v1/profiles/{id}/avatar:
    post:
      tags: [Uploads]
      summary: Profil avatar yükle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar güncellendi
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
    delete:
      tags: [Uploads]
      summary: Profil avatar sil
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Silindi
  /api/v1/profiles/{id}/avatar/attach:
    post:
      tags: [Uploads]
      summary: Direct upload ile yüklenen avatarı iliştir
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [signed_id]
              properties:
                signed_id: { type: string }
      responses:
        '200':
          description: Avatar iliştirildi
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthTokens:
      type: object
      properties:
        message: { type: string }
        user:
          type: object
          properties:
            id: { type: integer }
            email: { type: string, format: email }
        access_token: { type: string }
        refresh_token: { type: string }
        token_type: { type: string, example: Bearer }
        expires_in: { type: integer, example: 900 }
    RefreshResponse:
      type: object
      properties:
        access_token: { type: string }
        refresh_token: { type: string }
        token_type: { type: string, example: Bearer }
        expires_in: { type: integer, example: 900 }
    Profile:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        account_id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        bio: { type: string }
        full_name: { type: string }
    ProfileInput:
      type: object
      properties:
        user_id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        bio: { type: string }
  /api/v1/tasks:
    get:
      tags: [Tasks]
      summary: Görev listesi
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: items
          schema: { type: integer }
        - in: query
          name: q
          schema: { type: object }
        - in: query
          name: search
          schema: { type: string }
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Task' }
                  meta:
                    type: object
                    properties:
                      count: { type: integer }
                      page: { type: integer }
                      items: { type: integer }
                      pages: { type: integer }
                      prev: { type: integer, nullable: true }
                      next: { type: integer, nullable: true }
    post:
      tags: [Tasks]
      summary: Görev oluştur
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Oluşturuldu
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Task' }
  /api/v1/tasks/{id}:
    get:
      tags: [Tasks]
      summary: Görev detay
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Task' }
    put:
      tags: [Tasks]
      summary: Görev güncelle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Güncellendi
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Task' }
    delete:
      tags: [Tasks]
      summary: Görev sil
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Silindi
  /api/v1/tasks/{id}/event:
    post:
      tags: [Tasks]
      summary: AASM event tetikle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [event]
              properties:
                event: { type: string, example: queue }
      responses:
        '200':
          description: Güncellendi
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Task' }
    Task:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        account_id: { type: integer }
        title: { type: string }
        description: { type: string }
        state: { type: string, example: draft }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    TaskInput:
      type: object
      properties:
        user_id: { type: integer }
        title: { type: string }
        description: { type: string }
  /api/v1/tasks/{id}/attachments:
    post:
      tags: [Uploads]
      summary: Göreve çoklu dosya yükle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items:
  /api/v1/uploads/presign:
    post:
      tags: [Uploads]
      summary: S3 direct upload için imzalı URL üret
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [filename, content_type, byte_size, checksum]
              properties:
                filename: { type: string }
                content_type: { type: string }
                byte_size: { type: integer }
                checksum: { type: string, description: Base64-encoded MD5 }
      responses:
        '200':
          description: İmzalı URL ve headers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      signed_id: { type: string }
                      key: { type: string }
                      filename: { type: string }
                      byte_size: { type: integer }
                      content_type: { type: string }
                      direct_upload:
                        type: object
                        properties:
                          url: { type: string }
                          headers:
                            type: object
                    type: string
                    format: binary
      responses:
        '200':
          description: Güncellendi
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Task' }
  /api/v1/tasks/{id}/attachments/{attachment_id}:
    delete:
      tags: [Uploads]
      summary: Görev ek dosya sil
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: attachment_id
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Silindi
  /api/v1/tasks/{id}/attachments/attach:
    post:
      tags: [Uploads]
      summary: Direct upload ile yüklenen ekleri iliştir
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [signed_ids]
              properties:
                signed_ids:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Eklendi
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Task' }
